fragment Client on clients {
  address
  city
  country
  id
  name
  postCode: post_code
  vatId: vat_id
}

query client($id: Int_comparison_exp = {}) {
  clients(where: { id: $id }) {
    ...Client
  }
}

query clientList(
  $limit: Int = 10
  $offset: Int = 0
  $order_by: [clients_order_by!] = {}
  $where: clients_bool_exp = {}
  $search: String!
  $isSearch: Boolean!
) {
  search_clients(
    limit: $limit
    offset: $offset
    order_by: $order_by
    where: $where
    args: { search: $search }
  ) @include(if: $isSearch) {
    ...Client
    scenarios {
      id
      name
    }
  }

  clients(limit: $limit, offset: $offset, order_by: $order_by, where: $where) @skip(if: $isSearch) {
    ...Client
    scenarios {
      id
      name
    }
  }
  clients_aggregate {
    aggregate {
      totalCount: count
    }
  }
}

query clientDistinct {
  cityDistinct: clients_aggregate(distinct_on: city) {
    nodes {
      city
    }
  }
  countryDistinct: clients_aggregate(distinct_on: country) {
    nodes {
      country
    }
  }
}

mutation createClient($object: clients_insert_input!) {
  insert_clients_one(object: $object) {
    ...Client
  }
}

mutation deleteClient($where: clients_bool_exp!) {
  delete_clients(where: $where) {
    returning {
      id
    }
  }
}

mutation updateClient($where: clients_bool_exp!, $_set: clients_set_input!) {
  update_clients(where: $where, _set: $_set) {
    returning {
      ...Client
    }
  }
}
