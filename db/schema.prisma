// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
}

model Client {
  id       Int        @id @default(autoincrement())
  name     String
  address  String
  postCode String
  city     String
  country  String
  vatId    String?
  Scenario Scenario[]
}

model Merchant {
  id             Int        @id @default(autoincrement())
  issuerName     String
  companyName    String
  address        String
  postCode       String
  city           String
  country        String
  vatId          String
  email          String
  bankName       String
  bankAccountPln String
  bankAccountEur String?
  Scenario       Scenario[]
}

enum Unit {
  ITEM
  HOUR
}

enum Vat {
  PERCENT_0
  PERCENT_8
  PERCENT_23
  DOES_NOT_CONCERN
  FREED
}

enum Currency {
  PLN
  EUR
  USD
  NOK
}

enum PaymentType {
  CASH
  TRANSFER
}

model Scenario {
  id          Int         @id @default(autoincrement())
  name        String
  imgUrl      String
  notes       String
  dueDateDays Int
  paymentType PaymentType
  currency    Currency
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  merchant    Merchant    @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  clientId    Int
  merchantId  Int
  Invoice     Invoice[]
}

model InvoiceItem {
  id         Int     @id @default(autoincrement())
  name       String
  quantity   Int
  price      Int
  vat        Vat
  scenarioId Int
  invoice    Invoice @relation(fields: [scenarioId], references: [id])
}

model Invoice {
  id            Int           @id @default(autoincrement())
  invoiceNumber String
  issueDate     DateTime
  items         InvoiceItem[]
  amount        Int
  scenario      Scenario      @relation(fields: [scenarioId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  scenarioId    Int
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>> AUTH <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
